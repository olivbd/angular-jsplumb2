/*! angular-jsplumb2 - 4.0.5 - 2019-06-19 */

angular.module("angular-jsplumb2",[]),angular.module("angular-jsplumb2").directive("jsplumbEndpoint",(n,t)=>{"use strict";return{restrict:"A",require:"^jsplumbInstance",scope:!0,compile:()=>({post(e,c,o,s){e.attr=o,e.$applyAsync(()=>{const i=s.getInstance(),a=t(o.jsplumbEndpointSourceOptions)(e),r=t(o.jsplumbEndpointTargetOptions)(e);e.connectionIds=t(o.jsplumbEndpointConnectionIds)(e)||[],c.addClass("_jsPlumb_ng_endpoint"),a&&i.makeSource(c,a),r&&i.makeTarget(c,r),e.$watch("attr.jsplumbEndpointConnectionIds",(n,e)=>{const o=t(n)()||[],i=t(e)()||[],a=_.difference(i,o)||[];o&&o.length&&s.connectEndpointsMultiple(c.attr("id"),o),a&&a.length&&s.disconnectEndpointsMultiple(c.attr("id"),a)}),e.$watch("attr.jsplumbEndpointEnabled",(n,e)=>{const o=t(n)(),s=t(e)();void 0===o&&void 0===s||(i.setSourceEnabled(c,o),i.setTargetEnabled(c,o))}),e.$watch("attr.id",(t,e)=>{n.$broadcast("jsplumb.endpoint.idChanged",t,e)}),n.$broadcast("jsplumb.endpoint.created",c.attr("id"),e.connectionIds,i),e.$on("$destroy",()=>{i.removeAllEndpoints(c),i.remove(c),i.repaintEverything()})})}})}}),angular.module("angular-jsplumb2").controller("jsplumbInstanceCtrl",["$scope","$timeout","$window",function(n,t,e){const c=this;this.getInstance=function(){return n.instance},this.connectionForecast=[],this.connectEndpoints=function(t,e){let o=!1;n.instance.isSourceEnabled(t)||(o=!0,n.instance.setSourceEnabled(t,!0));let s=!1;n.instance.isTargetEnabled(e)||(s=!0,n.instance.setTargetEnabled(e,!0)),c.connectionExists(t,e)&&c.disconnectEndpoints(t,e);const i=n.instance.connect({source:t,target:e});return s&&n.instance.setTargetEnabled(e,!1),o&&n.instance.setSourceEnabled(t,!1),i},this.disconnectEndpoints=function(t,e){let o=t,s=e,i=t;if(s?i=c.getConnection(o,s):(o=t.sourceId,s=t.targetId),_.remove(c.connectionForecast,{sourceId:o,targetId:s}),i){let t=!1;n.instance.isSourceEnabled(o)||(t=!0,n.instance.setSourceEnabled(o,!0));let e=!1;n.instance.isTargetEnabled(s)||(e=!0,n.instance.setTargetEnabled(s,!0)),n.instance.deleteConnection(i),e&&n.instance.setTargetEnabled(s,!1),t&&n.instance.setSourceEnabled(o,!1)}return i},this.connectEndpointsMultiple=function(t,e){e.forEach(n=>{_.find(c.connectionForecast,{sourceId:t,targetId:n})||c.connectionForecast.push({sourceId:t,targetId:n})});const o=function(t,e){const c=[];n.instance.isSource(t)&&angular.forEach(e,t=>{n.instance.isTarget(t)&&c.push(t)});return c}(t,e);o.length&&angular.forEach(o,n=>{c.connectEndpoints(t,n)})},this.disconnectEndpointsMultiple=function(n,t){angular.forEach(t,t=>{c.disconnectEndpoints(n,t)})},this.getConnection=function(t,e){const c=n.instance.getAllConnections();return _.find(c,{sourceId:t,targetId:e})||_.find(c,{sourceId:e,targetId:t})},this.getConnections=function(t){const e=n.instance.getAllConnections();return _.filter(e,n=>n.sourceId===t||n.targetId===t)},this.connectionExists=function(n,t){return!!c.getConnection(n,t)},n.$on("jsplumb.endpoint.idChanged",(t,e,o)=>{o&&o!==e&&c.getConnections(o).forEach(n=>{c.disconnectEndpoints(n.sourceId,n.targetId)}),c.connectionForecast.filter(n=>n.sourceId===e||n.targetId===e).forEach(t=>{n.instance.connect({source:t.sourceId,target:t.targetId})})}),n.$on("jsplumb.endpoint.created",(n,t,e)=>{c.connectEndpointsMultiple(t,e)});const o=_.debounce(()=>{t(()=>{n.instance&&n.instance.revalidateEverything()})},33);n.$on("$destroy",()=>{n.instance&&($(window).off("resize",o),n.instance.reset()),n.instance=null}),$(window).on("resize",o);const s=angular.element(e);n.$watch(()=>({h:s.height(),w:s.width()}),o,!0),n.$on("jsplumb.endpoint.created",o)}]),angular.module("angular-jsplumb2").directive("jsplumbInstance",(n,t)=>{"use strict";return{restrict:"A",scope:!0,controller:"jsplumbInstanceCtrl",compile:()=>({pre(e,c,o,s){const i=t(o.jsplumbInstance)(e);c.addClass("_jsPlumb_ng_instance"),e.instance=jsPlumb.getInstance(angular.extend(i||{},{Container:c})),e.instance.revalidateEverything=function(){const n=this;$("._jsPlumb_ng_endpoint").each((t,e)=>{n.revalidate($(e).attr("id"))})},e.instance.connectEndpoints=function(n,t){return s.connectEndpoints(n,t)},e.instance.disconnectEndpoints=function(n,t){return s.disconnectEndpoints(n,t)},e.instance.getConnectionBySourceIdAndTargetId=function(n,t){return s.getConnection(n,t)},n.$broadcast("jsplumb.instance.created",e.instance),e.instance.bind("connection",(t,c)=>{n.$broadcast("jsplumb.instance.connection",t.connection,t.sourceEndpoint,t.targetEndpoint,e.instance,c),c&&e.$apply()}),e.instance.bind("mouseover",(t,c)=>{n.$broadcast("jsplumb.instance.connection.mouseover",t,e.instance,c)}),e.instance.bind("mouseout",(t,c)=>{n.$broadcast("jsplumb.instance.connection.mouseout",t,e.instance,c)}),e.instance.bind("beforeDrop",n=>!i.DuplicateConnectionsAllowed&&s.connectionExists(n.sourceId,n.targetId)?null:n.connection),e.instance.bind("click",(t,c)=>{n.$broadcast("jsplumb.instance.connection.click",t,e.instance,c),c&&e.$apply()}),e.instance.bind("connectionDetached",(t,c)=>{n.$broadcast("jsplumb.instance.connection.detached",t.connection,t.sourceEndpoint,t.targetEndpoint,e.instance,c),c&&e.$apply()})}})}}),angular.module("angular-jsplumb2").service("jsPlumbService",["$q",function(n){"use strict";const t=n.defer();this.jsplumbInit=function(){return jsPlumb.ready(()=>{t.resolve()}),t.promise},this.importDefaults=function(n){jsPlumb.importDefaults(n)}}]);